#!/usr/bin/env bash

# Pomo implements a timer, defaulting 25 minutes per pomodoro norms.
# Each timer is named to facilitate clarity of focus.
#
# Name and remaining time are displayed:
# - tmux window heading (if tmux is active)
# - terminal (if tmux is not active)
# 
# Warnings (set per POMO_WARN) are sent to:
# - terminal (audible bell)
# - notify-send (if Linux)
# - tmux message bar (if active)
# 
# Terminated and completed timers are logged to $POMO_LOG.

if [[ -z "$POMO_LEN" ]]; then
  POMO_LEN=25 # default length of a pomodoro
fi

if [[ -z "$POMO_LOG" ]]; then
  # pomodoro log, format:
  # timestamp | {elapsed/total}m | task name
  POMO_LOG="$HOME/.pomo.log"
fi

if [[ -z "$POMO_WARN" ]]; then
  # minutes remaining on which to warn
  POMO_WARN=(1 5)
fi

# Capture the current tmux window name and index.
# Reset this upon exit.
TMUX_INDEX=$(tmux display-message -p '#I')
TMUX_WIN_NAME=$(tmux display-message -p '#W')

# Require task name for every timer.
if [[ -z "$1" ]]; then
  echo "Usage: $0 <task-name>"
  echo "Example: $0 review PR #123"
  exit 1
fi
TASK="$*"

#############
# FUNCTIONS #
#############

# 1999-12-31T23:59
timestamp() {
  date +%Y-%m-%dT%R
}

# format_time() converts '85' seconds into '01:25' string
format_time() {
  minutes=$(( $1 / 60 ))
  seconds=$(( $1 % 60 ))
  printf "%02d:%02d" $minutes $seconds
}

# warn() provides a notification when n minutes remain
# as defined by POMO_WARN array of minutes.
warn() {
  for warning in "${POMO_WARN[@]}"; do
    if (( $1 == warning * 60 )); then
      notify "$TASK: $(format_time "$1") remaining"
    fi
  done
}

# notify() sends notifications to
# - OS system
# - tmux message bar
notify() {
  if [[ -n "$TMUX" ]]; then
    tmux display-message "$1"
  else
    echo "$1"
  fi
  echo -ne "\a" # audible bell

  # OS-specific notifications
  if [[ $(uname) == "Linux" ]]; then
    notify-send "$1" 2> /dev/null # don't care if the popup fails
    # spd-say "$1" # kinda frightening tbh
    return 0
  else
    echo "error: notifications not supported on OS: $(uname)"
    return 1
  fi
}

main() {
  local duration="$POMO_LEN"
  local total_seconds=$((duration * 60))
  local interval=1
  local elapsed=0

  while [ $elapsed -lt $total_seconds ]; do
    elapsed=$((elapsed + interval))
    remaining=$((total_seconds - elapsed))
    completed=$(( elapsed / 60 ))

    if [[ -n "$TMUX" ]]; then
      # Rename the tmux window to show the task name and remaining time.
      tmux rename-window -t \
        "$TMUX_INDEX" \
        "$TASK $(format_time "$remaining")"
    else
      # Update the terminal with the task name and remaining time.
      echo -ne "\r$1: $(format_time $remaining)"
    fi

    warn $remaining
    sleep $interval
  done

  notify "$1: session over"
}

cleanup() {
  # Record the end of every pomodoro into log.
  echo "$(timestamp) ${completed}/${POMO_LEN}m $TASK" >> "$POMO_LOG"

  # Reset the window name to the original.
  if [[ -n "$TMUX" ]]; then
    tmux rename-window -t "$TMUX_INDEX" "$TMUX_WIN_NAME"
  fi
}

########
# MAIN #
########

trap cleanup EXIT
main "$TASK"
